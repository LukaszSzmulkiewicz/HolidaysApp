/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package assessmentgui;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class AssessmentGuiUI extends javax.swing.JFrame {

    /**
     * Creates new form AssessmentGuiUI
     */
    private String filePath = "employees.txt";


    // Create a new file object, pointing to the file in the system
    private File file = new File(filePath);
    private String regex = "[0-9]+";

    public AssessmentGuiUI() {
       
        initComponents();
        getAllEmployees();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        ListEmp = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        textEmpID = new javax.swing.JTextField();
        textEmpName = new javax.swing.JTextField();
        textEmpSur = new javax.swing.JTextField();
        textEmpGen = new javax.swing.JTextField();
        textEmpAge = new javax.swing.JTextField();
        jButtonAddEmp = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButtonSaveEmp = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        EditEmp = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jTextSearchDelEmpID = new javax.swing.JTextField();
        jButtonSearchEmpIDtoDel = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButtonDelEmp = new javax.swing.JButton();
        HolRequest = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jTextSearchEmpID = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextFieldHolRequested = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jButtonValidateHol = new javax.swing.JButton();
        HolStatus = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jTextSearchEmpIDHolStat = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButtonSearchEmpIDHolStat = new javax.swing.JButton();
        jButtonClearEmpIDHolStat = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Surname", "Gender", "Age", "Hol Remaining", "Hol Requested"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel3.setText("Employee Surname");

        jLabel4.setText("Employee Age");

        jLabel5.setText("Employee Gender");

        textEmpID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textEmpIDActionPerformed(evt);
            }
        });

        textEmpName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textEmpNameActionPerformed(evt);
            }
        });

        textEmpAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textEmpAgeActionPerformed(evt);
            }
        });

        jButtonAddEmp.setText("Add Employee");
        jButtonAddEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddEmpActionPerformed(evt);
            }
        });

        jLabel1.setText("Employee Name");

        jLabel2.setText("Employee ID");

        jButtonSaveEmp.setText("Save");
        jButtonSaveEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveEmpActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel6.setText("Please save before moving to another part of the program!");

        javax.swing.GroupLayout ListEmpLayout = new javax.swing.GroupLayout(ListEmp);
        ListEmp.setLayout(ListEmpLayout);
        ListEmpLayout.setHorizontalGroup(
            ListEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ListEmpLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(ListEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonAddEmp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textEmpAge)
                    .addComponent(textEmpSur)
                    .addComponent(textEmpName)
                    .addComponent(textEmpID)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textEmpGen)
                    .addComponent(jButtonSaveEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(ListEmpLayout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 747, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 112, Short.MAX_VALUE))
        );
        ListEmpLayout.setVerticalGroup(
            ListEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ListEmpLayout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(ListEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ListEmpLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textEmpID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textEmpName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textEmpSur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textEmpAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textEmpGen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAddEmp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonSaveEmp))))
        );

        jTabbedPane1.addTab("Add/ List all employees", ListEmp);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Search for an employee ID to delete");

        jTextSearchDelEmpID.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jTextSearchDelEmpID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextSearchDelEmpIDActionPerformed(evt);
            }
        });

        jButtonSearchEmpIDtoDel.setText("Search");
        jButtonSearchEmpIDtoDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchEmpIDtoDelActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Surname", "Gender", "Age", "Hol Remaining", "Hol Requested"
            }
        ));
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(3).setHeaderValue("Gender");
            jTable2.getColumnModel().getColumn(4).setHeaderValue("Age");
        }

        jButtonDelEmp.setText("Delete the employee record");
        jButtonDelEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelEmpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout EditEmpLayout = new javax.swing.GroupLayout(EditEmp);
        EditEmp.setLayout(EditEmpLayout);
        EditEmpLayout.setHorizontalGroup(
            EditEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EditEmpLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButtonDelEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(440, 440, 440))
            .addGroup(EditEmpLayout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addGroup(EditEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextSearchDelEmpID)
                    .addComponent(jButtonSearchEmpIDtoDel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EditEmpLayout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 804, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        EditEmpLayout.setVerticalGroup(
            EditEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EditEmpLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextSearchDelEmpID, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonSearchEmpIDtoDel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jButtonDelEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(131, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Delete an employee", EditEmp);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setText("Please enter the employee ID and number of days requested:");

        jTextSearchEmpID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextSearchEmpIDActionPerformed(evt);
            }
        });

        jLabel12.setText("Employee ID");

        jTextFieldHolRequested.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldHolRequestedActionPerformed(evt);
            }
        });

        jLabel13.setText("Number of days requested");

        jButtonValidateHol.setText("Validate the holiday request");
        jButtonValidateHol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonValidateHolActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout HolRequestLayout = new javax.swing.GroupLayout(HolRequest);
        HolRequest.setLayout(HolRequestLayout);
        HolRequestLayout.setHorizontalGroup(
            HolRequestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HolRequestLayout.createSequentialGroup()
                .addGroup(HolRequestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HolRequestLayout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(HolRequestLayout.createSequentialGroup()
                        .addGap(155, 155, 155)
                        .addGroup(HolRequestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonValidateHol, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(HolRequestLayout.createSequentialGroup()
                                .addGroup(HolRequestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                                    .addComponent(jTextSearchEmpID))
                                .addGap(105, 105, 105)
                                .addGroup(HolRequestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldHolRequested, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(118, Short.MAX_VALUE))
        );
        HolRequestLayout.setVerticalGroup(
            HolRequestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HolRequestLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addGroup(HolRequestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HolRequestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldHolRequested, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(jTextSearchEmpID))
                .addGap(34, 34, 34)
                .addComponent(jButtonValidateHol, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(248, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Holiday Request", HolRequest);

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel14.setText("Please enter the employee ID to view the holiday status:");

        jTextSearchEmpIDHolStat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextSearchEmpIDHolStatActionPerformed(evt);
            }
        });

        jLabel15.setText("Employee ID");

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Surname", "Age", "Gender", "Hol Remaining", "Hol Requested"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        jButtonSearchEmpIDHolStat.setText("Search");
        jButtonSearchEmpIDHolStat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchEmpIDHolStatActionPerformed(evt);
            }
        });

        jButtonClearEmpIDHolStat.setText("Clear");
        jButtonClearEmpIDHolStat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearEmpIDHolStatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout HolStatusLayout = new javax.swing.GroupLayout(HolStatus);
        HolStatus.setLayout(HolStatusLayout);
        HolStatusLayout.setHorizontalGroup(
            HolStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HolStatusLayout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addGroup(HolStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 751, Short.MAX_VALUE)
                    .addGroup(HolStatusLayout.createSequentialGroup()
                        .addGroup(HolStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(HolStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jTextSearchEmpIDHolStat, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButtonSearchEmpIDHolStat, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE))
                            .addComponent(jButtonClearEmpIDHolStat, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 724, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        HolStatusLayout.setVerticalGroup(
            HolStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HolStatusLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextSearchEmpIDHolStat, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonSearchEmpIDHolStat, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonClearEmpIDHolStat, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(126, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Holiday Status", HolStatus);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonValidateHolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValidateHolActionPerformed
        // TODO add your handling code here:
        // delaring variables 
        boolean holydaysAut=false;
        
        // declaring an array to hold the employee object
        ArrayList<Employee> empArrayList = new ArrayList<>();
        
        // loading the array with the employee object
        empArrayList = loadTableDataIntoArray();
        
        // validating the request with the text fields for emp ID and amount of days requested
        if (jTextSearchEmpID.getText().equals("") || jTextFieldHolRequested.getText().equals("")) {

            // Show popup error message if fields are empty
            JOptionPane.showMessageDialog(this, "Please populate all fileds");
        } else if (!jTextFieldHolRequested.getText().matches(regex)) {
            JOptionPane.showMessageDialog(this, "The number number of days field should only contain numbers!");
            jTextFieldHolRequested.setText("");
        } else {

        
            try {
                
                // validating the holiday request via method
                holydaysAut = holidayRequest(jTextSearchEmpID.getText(), jTextFieldHolRequested.getText(), empArrayList);
            } catch (InvalidHolidaysException ex) {
                Logger.getLogger(AssessmentGuiUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
           
        if (holydaysAut) {
            JOptionPane.showMessageDialog(this, "Holidays authorised");
              try {
        // the method updates the text file and the main table if the holidays approved          
            saveArrayIntoTheFile(empArrayList);
        } catch (IOException ex) {
            Logger.getLogger(AssessmentGuiUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        } else {
            JOptionPane.showMessageDialog(this, "This employee has not got enough holidays remaining");
        }

        
        // clearing the text fields 
        jTextSearchEmpID.setText("");
        jTextFieldHolRequested.setText("");
        }
    }//GEN-LAST:event_jButtonValidateHolActionPerformed

    private void jTextFieldHolRequestedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldHolRequestedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldHolRequestedActionPerformed

    private void jTextSearchEmpIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextSearchEmpIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextSearchEmpIDActionPerformed

    private void jButtonDelEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelEmpActionPerformed
       
      
        // calling the method to del the employee object and passing emp id through the text field
        try {
            delEmpldetails(jTextSearchDelEmpID.getText());
        } catch (IOException ex) {
            Logger.getLogger(AssessmentGuiUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        // clearing the text field
        jTextSearchDelEmpID.setText("");

    }//GEN-LAST:event_jButtonDelEmpActionPerformed

    private void jButtonSearchEmpIDtoDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchEmpIDtoDelActionPerformed
        
       // calling the display ID method and displaying the employee details in the table
        displayEmplID(jTextSearchDelEmpID.getText(), jTable2);
    }//GEN-LAST:event_jButtonSearchEmpIDtoDelActionPerformed

    private void jTextSearchDelEmpIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextSearchDelEmpIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextSearchDelEmpIDActionPerformed

    private void jButtonSaveEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveEmpActionPerformed
        // calling the method to save all employees
        saveAllEmployees();
    }//GEN-LAST:event_jButtonSaveEmpActionPerformed

    private void jButtonAddEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddEmpActionPerformed
        // adding new employee

        if (textEmpID.getText().equals("") || textEmpName.getText().equals("")
            || textEmpSur.getText().equals("") || textEmpAge.getText().equals("")) {

            // Show popup error message
            JOptionPane.showMessageDialog(this, "Please populate all fileds");

        }else if(!textEmpAge.getText().matches(regex)){
                JOptionPane.showMessageDialog(this, "The Employee age should only contain numbers!");
                textEmpAge.setText("");
        }else {
            // ceating an array for employee objects
            ArrayList<Employee> empArrayList = new ArrayList<>();

            // add a new student to the ArrayList
            empArrayList.add(new Employee(textEmpID.getText(), textEmpName.getText(), textEmpSur.getText(),textEmpGen.getText(),
                textEmpAge.getText(),  25, 0));

        // get student info and assign it to the string variables
        String arrTextEmpID = empArrayList.get(0).getEmployeeId();
        String arrTextEmpName = empArrayList.get(0).getEmployeeName();
        String arrTextEmpSur = empArrayList.get(0).getEmployeeSurname();
        String arrTextEmpAge = empArrayList.get(0).getEmployeetAge();
        String arrTextEmpGen = empArrayList.get(0).getEmployeetGender();
        String arrTextEmployeeHolRemaining = String.valueOf(empArrayList.get(0).getEmployeeHolRemaining());
        String arrTextEmployeeHolRequested = String.valueOf(empArrayList.get(0).getEmployeeHolRequested());
        
        // creating an object with the employee info
        Object[] empInfo = {arrTextEmpID, arrTextEmpName, arrTextEmpSur, arrTextEmpAge, arrTextEmpGen, arrTextEmployeeHolRemaining, arrTextEmployeeHolRequested};


        // Create Table Model object
        DefaultTableModel tbModel = (DefaultTableModel) jTable1.getModel();

        // Add the String array
        tbModel.addRow(empInfo);

        // clrear the text fields
        textEmpID.setText("");
        textEmpName.setText("");
        textEmpSur.setText("");
        textEmpGen.setText("");
        textEmpAge.setText("");

        }
       
    }//GEN-LAST:event_jButtonAddEmpActionPerformed

    private void textEmpNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textEmpNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textEmpNameActionPerformed

    private void textEmpIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textEmpIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textEmpIDActionPerformed

    private void jTextSearchEmpIDHolStatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextSearchEmpIDHolStatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextSearchEmpIDHolStatActionPerformed

    private void jButtonSearchEmpIDHolStatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchEmpIDHolStatActionPerformed
             
        // calling method to display employee details in the holiday status table
        displayEmplID(jTextSearchEmpIDHolStat.getText(), jTable3);
    }//GEN-LAST:event_jButtonSearchEmpIDHolStatActionPerformed

    private void jButtonClearEmpIDHolStatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearEmpIDHolStatActionPerformed
        
        // clearing the text field and the table in the holiday status section 
        jTextSearchEmpIDHolStat.setText("");
        DefaultTableModel tbModel = (DefaultTableModel) jTable3.getModel();
        tbModel.removeRow(0);
        
    }//GEN-LAST:event_jButtonClearEmpIDHolStatActionPerformed

    private void textEmpAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textEmpAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textEmpAgeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AssessmentGuiUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AssessmentGuiUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AssessmentGuiUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AssessmentGuiUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AssessmentGuiUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel EditEmp;
    private javax.swing.JPanel HolRequest;
    private javax.swing.JPanel HolStatus;
    private javax.swing.JPanel ListEmp;
    private javax.swing.JButton jButtonAddEmp;
    private javax.swing.JButton jButtonClearEmpIDHolStat;
    private javax.swing.JButton jButtonDelEmp;
    private javax.swing.JButton jButtonSaveEmp;
    private javax.swing.JButton jButtonSearchEmpIDHolStat;
    private javax.swing.JButton jButtonSearchEmpIDtoDel;
    private javax.swing.JButton jButtonValidateHol;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextFieldHolRequested;
    private javax.swing.JTextField jTextSearchDelEmpID;
    private javax.swing.JTextField jTextSearchEmpID;
    private javax.swing.JTextField jTextSearchEmpIDHolStat;
    private javax.swing.JTextField textEmpAge;
    private javax.swing.JTextField textEmpGen;
    private javax.swing.JTextField textEmpID;
    private javax.swing.JTextField textEmpName;
    private javax.swing.JTextField textEmpSur;
    // End of variables declaration//GEN-END:variables

    // method to save the employees
    private void saveAllEmployees() {

        // check if the file exists in the system
        if (!file.exists()) {
            try {
                // Create the file 
                file.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Please populate all fileds");
                Logger.getLogger(AssessmentGuiUI.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        //  check if the table has data rows
        if (jTable1.getRowCount() == 0) {
            // Show error message to the user

            JOptionPane.showMessageDialog(this, "No employees to save!");

        } else {
            try {
                // Save the table content to the file
                FileWriter fw = new FileWriter(file);

                // Write the text
                BufferedWriter buffer = new BufferedWriter(fw);

                // Loom to write the table content (rows and columns)
                for (int row = 0; row < jTable1.getRowCount(); row++) {

                    for (int col = 0; col < jTable1.getColumnCount(); col++) {
                        // write the content separated by a comma
                        buffer.write(jTable1.getValueAt(row, col).toString() + ",");

                    }
                        // The new line method
                    buffer.newLine();

                }
            

                // Close the streams, flushing it first
                buffer.close();
                fw.close();
                JOptionPane.showMessageDialog(this, "Changes to the employee database saved!");

            } catch (IOException ex) {
                Logger.getLogger(AssessmentGuiUI.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }

    private void getAllEmployees() {
        // Check if the file exists in the system
        DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
        if (file.exists()) {

            try {
                // Read the file content
                FileReader fr = new FileReader(this.filePath);
                BufferedReader br = new BufferedReader(fr);

                // Create an object 
                Object[] lines = br.lines().toArray();

                // Loop to add the content of the file into the row
                for (int i = 0; i < lines.length; i++) {

                    // Create String array
                    String row[] = lines[i].toString().split(",");
                    tblModel.addRow(row);
                }
            } catch (IOException ex) {
                Logger.getLogger(AssessmentGuiUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    // method to update the main table
    private void updateMainEmplTable() {
        
        
        // and Create Table Model object
        DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
        // Check if the file with data exists in the system 
        if (file.exists()) {
            
            // clear the outdated data from the table and load the new data once
            // the table is empty
            if (tblModel.getRowCount() > 0) {
                int counter = tblModel.getRowCount();
                while (counter-- > 0) {
                    tblModel.removeRow(0);

                }
            }
            try {
                // Read the file content
                FileReader fr = new FileReader(this.filePath);
                BufferedReader br = new BufferedReader(fr);

                // Create an object 
                Object[] lines = br.lines().toArray();

                // Loop to add the content of the file into the row
                for (int i = 0; i < lines.length; i++) {

                    // Create String array
                    String row[] = lines[i].toString().split(",");
                    tblModel.addRow(row);
                }
            } catch (IOException ex) {
                Logger.getLogger(AssessmentGuiUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    // method to validate holiday request
    private boolean holidayRequest(String empID, String holidaysRequested, ArrayList<Employee> empArrayList1) throws InvalidHolidaysException {

        boolean holidayRequest = false;
        int holidaysRequestedIntVal = Integer.parseInt(holidaysRequested);
        
        // looking for the employee ID in the array of employees
        for (Employee emp : empArrayList1) {

            if (emp.getEmployeeId().matches(empID)) {
                
                // once the match found, validating the request via method
                holidayRequest = emp.validateHolidayRequest(holidaysRequestedIntVal);
                if (holidayRequest) {
                    // updating the emp object if holiday approved
                   emp.updateHolidaysData(holidaysRequestedIntVal);

                }

            }

        }
        
        return holidayRequest;
    }
    
    // method to display emp details in a table 
    private void displayEmplID(String empID, JTable jTable) {
        
        // loading an array with employee objects from a file
        ArrayList<Employee> empArrayList = new ArrayList<>();
        empArrayList = loadTableDataIntoArray();
        int counter=0;
        
        // looping through the array and passing on strings into the table
        for (Employee emp : empArrayList) {

            if (emp.getEmployeeId().matches(empID)) {
                counter++;
                String arrTextEmpID = emp.getEmployeeId();
                String arrTextEmpName = emp.getEmployeeName();
                String arrTextEmpSur = emp.getEmployeeSurname();
                String arrTextEmpAge = emp.getEmployeetAge();
                String arrTextEmpGen = emp.getEmployeetGender();
                String arrTextEmployeeHolRemaining = String.valueOf(emp.getEmployeeHolRemaining());
                String arrTextEmployeeHolRequested = String.valueOf(emp.getEmployeeHolRequested());
                // creat an object with the employee info
                Object[] empInfo = {arrTextEmpID, arrTextEmpName, arrTextEmpSur, arrTextEmpAge, arrTextEmpGen, arrTextEmployeeHolRemaining, arrTextEmployeeHolRequested};

                DefaultTableModel tbModel = (DefaultTableModel) jTable.getModel();

                // Add the String array
                tbModel.addRow(empInfo);

            }

        }
        
        if (counter ==0){
             JOptionPane.showMessageDialog(this, "Please check the employee ID entered!");
            }

    }
    
    // method to load an array with the employee objects
    private ArrayList<Employee> loadTableDataIntoArray() {
        ArrayList<Employee> empArrayList = new ArrayList<>();
        File myFile = new File(this.filePath);

        try {
            FileReader fr = new FileReader(myFile);
            BufferedReader br = new BufferedReader(fr);

            String data = "";

            while ((data = br.readLine()) != null) {
                StringTokenizer st = new StringTokenizer(data, ",");

                while (st.hasMoreTokens()) {

                    Employee emp = new Employee();

                    emp.setEmployeeId(st.nextToken().trim());
                    emp.setEmployeeName(st.nextToken().trim());
                    emp.setEmployeeSurname(st.nextToken().trim());
                    emp.setEmployeetAge(st.nextToken().trim());
                    emp.setEmployeetGender(st.nextToken().trim());
                    emp.setEmployeeHolRemaining(Integer.parseInt(st.nextToken().trim()));
                    emp.setEmployeeHolRequested(Integer.parseInt(st.nextToken().trim()));
                    empArrayList.add(emp);

                }
            }
            br.close();

        } catch (IOException e) {
            System.out.println("Error loading file");
        }
        return empArrayList;
    }

    // method to save an array with employee object into a source file
    private void saveArrayIntoTheFile(ArrayList<Employee> empArrayList) throws IOException {

        // Save the table content to the file
        FileWriter fw = new FileWriter(file);

        // Write the text
        BufferedWriter buffer = new BufferedWriter(fw);

        // check if the file exists in the system
        if (!file.exists()) {

            // Create the file 
            file.createNewFile();

        }

        //  check if the table has data rows
        if (empArrayList.isEmpty()) {
            // Show error message to the user

            JOptionPane.showMessageDialog(this, "The database is empty");
            buffer.write(" ");

            DefaultTableModel tbModel = (DefaultTableModel) jTable1.getModel();
            tbModel.removeRow(0);

        } else {
            try {
                // Save the array content to the file

                for (Employee emp : empArrayList) {
                    buffer.write(emp.getEmployeeId() + ","
                            + emp.getEmployeeName() + ","
                            + emp.getEmployeeSurname() + ","
                            + emp.getEmployeetAge() + ","
                            + emp.getEmployeetGender() + ","
                            + emp.getEmployeeHolRemaining() + ","
                            + emp.getEmployeeHolRequested() + ",");
                    buffer.newLine();

                }

                buffer.close();
                fw.close();
             

            } catch (IOException ex) {
                Logger.getLogger(AssessmentGuiUI.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        updateMainEmplTable();

    }
    // method to delete employee details
    private void delEmpldetails(String empID) throws IOException {
        // check if the file exists in the system and load an temp array with employee data
          ArrayList<Employee> empArrayList = new ArrayList<>();
        empArrayList = loadTableDataIntoArray();
        int index = 0;
        int counter=0;
        
        // look for the matching employee id
        for (Employee emp : empArrayList) {

            if (emp.getEmployeeId().matches(empID)) {
                counter++;
                // if employee found, take the index of the employee 
                index = empArrayList.indexOf(emp);
                JOptionPane.showMessageDialog(this, "Employee record deleted!");
                       
            }
              // display error message if there is no ID match
           
            
        }
         if (counter ==0){
             JOptionPane.showMessageDialog(this, "Please check the employee ID entered!");
            }
      
        
        //delete an employee from the array    
        empArrayList.remove(index);
        
        // save the new array details into the text file
        saveArrayIntoTheFile(empArrayList);
        
        // clear the table from the del employee section
        DefaultTableModel tbModel = (DefaultTableModel) jTable2.getModel();
        tbModel.removeRow(0);
        
        // update the main table with up to date details
        updateMainEmplTable();

    }

}
